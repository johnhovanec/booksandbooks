extends ../layout

block content
	.col-sm-9.mainContent(ng-app="pagerApp" ng-controller="pageController")
		.col-sm-4.col-content(ng-repeat="book in books" ng-cloak)
			img(height='175px' ng-src="/art/{{book.imgPath | escape}}")
			ul
				li #[span(class='metaField') Title:] {{ book.title }}
				li #[span(class='metaField') Author: ]{{ book.authorFName }} {{ book.authorLName}}
				li #[span(class='metaField') Price:] #[span(class='metaFieldPrice') {{ book.price | currency }}]

							//- a(ng-href="books/{{book._id | escape}}")
								img(height='175px' ng-src="/art/{{book.imgPath | escape}}")
			//- tbody
			//- 	tr(ng-repeat="rows in books | chunk:3")
			//- 		//- td(ng-repeat="book in books")
			//- 		td(ng-bind="book.title")
			//- 			a(ng-href="books/{{book._id | escape}}")
			//- 				img(height='175px' ng-src="/art/{{book.imgPath | escape}}")
					//- each book, index in books
					//- 	if (index > 0 && index % 3 === 0) 
					//- 		tr 
					//- 	td
					//- 		a(href="books/" + book._id)
					//- 			img(height='175px' src="/art/" + book.imgPath)
					//- 		ul
					//- 			li #[span(class='metaField') Title:] #{book.title}
					//- 			li #[span(class='metaField') Author:] #{book.authorFName} #{book.authorLName}
					//- 			// Need to convert price value to currency format
					//- 			li #[span(class='metaField') Price:] #[span(class='metaFieldPrice') $#{book.price/100}]	


		.resultDiv
			p(id='results') Results #{pageMin} - #{+skip + books.length} of #{total}

			if skip > 0
				a(href="javascript: void()")
					button.btn.btn-paging(ng-click="getPrev()" id="prevBtn" type='button')
						| Prev

			if !(pageMax >= total)
			a(href="#")
				button.btn.btn-paging(ng-click="getNext()" id="nextBtn" type='button')
					| Next

		hr
		a(href="books/checkout")
			button.btn.btn-primary(type='button')
				i.fa.fa-check
				| Checkout
		hr
	include ../partials/sidebar		

	script.
		// Note: skip = pageMin
		var skip = 0;//#{skip};
		var pageNum = skip;
		var pageMax = skip + 6;
		var pageMin = skip;//#{skip};
		var total = #{total};


		var app = angular.module('pagerApp', []);
		app.controller('pageController', function($scope, $http) {
			console.log("In pageController: skip=" + skip + " pageNum = " + pageNum + " pageMin=" + pageMin + " pageMax=" + pageMax + " total=" + total);
			$http.get("/pageNext/"+0, {
				params: { 'skip' : skip, 'pageMin' : pageMin, 'pageMax' : pageMax, 'total' : total }
			})
			.then(function(response) {
				//console.log(response.data.books);
				$scope.books = response.data.books;

				// Next Page
				$scope.getNext = function() {
					console.log("1 getNext(): skip=" + skip + " pageNum = " +  pageNum  + " pageMin=" + pageMin + " pageMax=" + pageMax + " total=" + total);
					$http.get("/pageNext/"+pageMax, {
						params: { 'skip' : skip, 'pageMin' : pageMin, 'pageMax' : pageMax, 'total' : total }
					})
					.then(function(response) {
						console.log("Min=" + response.data.pageMin + " pageMax=" +response.data.pageMax);
						$scope.books = response.data.books;

					});
					//debugger;
					pageMin = response.data.pageMin;
					console.log("2 getNext(): skip=" + skip + " pageNum = " + pageNum + " pageMin=" + pageMin + " pageMax=" + pageMax + " total=" + total);
				}


			});
		});

		// Filter to clean-up URIs sent in hrefs
		app.filter('escape', function() {
			return function(input) {
				if(input) {
					return window.encodeURIComponent(input); 
				}
				return "";
			}
		});

		//Filter to create 3 cols to table
		//- app.filter('chunk', function() {
		//- 	return memoize(chunk);
		//- });



		
		// Paging of items on index page, Next button
		function onNext() {
			//event.preventDefault();
			$('.itemsTable').remove();  // remove existing records
			$('#results').remove();

			// Note: skip = pageMin
			var skip = #{skip};
			var pageMax = #{skip} + #{books.length};
			var pageMin = #{skip};
			var total = #{total};

		console.log("*** pageMin= " + pageMin + " PageMax = " + pageMax);
			$.ajax({
				url: '/pageNext/'+pageMax,
				data: { 'skip' : skip, 'pageMin' : pageMin, 'pageMax' : pageMax, 'total' : total },
				type: "get",
				cache: false,
				success: function (data) {
					console.log("AJAX in view success");
					$.each(data.books, function( i, field) {
						$(".mainTable").append("<tr><td><img height='175' src='/art/"+data.books[i].imgPath + "'<br>"  +  data.books[i].title + "<br>" + data.books[i].authorFName + " " + data.books[i].authorLName + "<br>" + data.books[i].price/100 + "<td></tr>");
					});
					//debugger;
					$('.resultDiv').prepend("<p id='results'> Results " + parseInt(data.pageMin + 1) + "-" + data.pageMax + " of " + data.total + "</p>");
				},
				error: function (xhr, ajaxOptions, thrownError) {
					//$('#lblCommentsNotification').text("Error encountered while saving the comments.");
					console.log("AJAX in view err");
				},
			});
		}


		function onPrev() {
			//event.preventDefault();
			//$('.itemsTable').remove();  // remove existing records

			// skip = pageMin
			var skip = #{skip}+pageMax;
			var pageMax = #{skip} + #{books.length};
			var pageMin = #{skip}+pageMax;

		console.log("*** skip = " + skip + " pageMin= " + pageMin + " PageMax = " + pageMax + " itempp  = " + itemsPerPage);
			$.ajax({
				url: '/pageNext/'+pageMin-itemsPerPage,
				data: { 'pageMin' : pageMin, 'pageMax' : pageMax },
				type: "get",
				cache: false,
				success: function (savingStatus) {
					//$("#hdnOrigComments").val($('#txtComments').val());
					//$('#lblCommentsNotification').text(savingStatus);
					console.log("AJAX in view success");
				},
				error: function (xhr, ajaxOptions, thrownError) {
					//$('#lblCommentsNotification').text("Error encountered while saving the comments.");
					console.log("AJAX in view err");
				},
			});
		}




